{
  "openapi": "3.0.0",
  "info": {
    "title": "Chatbox RAG API",
    "version": "1.0.0",
    "description": "A comprehensive API for Chatbox RAG application with MongoDB integration",
    "contact": {
      "name": "API Support",
      "email": "support@chatboxrag.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    },
    {
      "url": "https://api.chatboxrag.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api": {
      "get": {
        "summary": "Get API information",
        "description": "Returns basic information about the API",
        "tags": ["General"],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Chatbox RAG API v1.0.0"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "endpoints": {
                      "type": "object"
                    },
                    "documentation": {
                      "type": "string",
                      "example": "/api-docs"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Health check",
        "description": "Returns the health status of the API",
        "tags": ["General"],
        "responses": {
          "200": {
            "description": "Health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Server uptime in seconds"
                    },
                    "memory": {
                      "type": "object",
                      "properties": {
                        "used": {
                          "type": "number",
                          "description": "Used memory in MB"
                        },
                        "total": {
                          "type": "number",
                          "description": "Total memory in MB"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages": {
      "get": {
        "summary": "Get all messages",
        "description": "Retrieve all messages from the database",
        "tags": ["Messages"],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new message",
        "description": "Add a new message to the database",
        "tags": ["Messages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content", "sender"],
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Message content",
                    "example": "Hello, how are you?"
                  },
                  "sender": {
                    "type": "string",
                    "description": "Message sender name",
                    "example": "John Doe"
                  },
                  "messageType": {
                    "type": "string",
                    "enum": ["user", "bot"],
                    "description": "Type of message",
                    "example": "user"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional message metadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{id}": {
      "get": {
        "summary": "Get message by ID",
        "description": "Retrieve a specific message by its ID",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Message ID",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "description": "Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete message by ID",
        "description": "Remove a specific message from the database",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Message ID",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Message deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve all users from the database",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Add a new user to the database",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "email"],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "description": "Unique username",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address",
                    "example": "john@example.com"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "User avatar URL",
                    "example": "https://example.com/avatar.jpg"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "User active status",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "description": "Update a specific user's information",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30,
                    "description": "Unique username",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address",
                    "example": "john@example.com"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "User avatar URL",
                    "example": "https://example.com/avatar.jpg"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "User active status",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "Remove a specific user from the database",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Message": {
        "type": "object",
        "required": ["content", "sender"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated MongoDB ObjectId"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello, how are you?"
          },
          "sender": {
            "type": "string",
            "description": "Message sender name",
            "example": "John Doe"
          },
          "messageType": {
            "type": "string",
            "enum": ["user", "bot"],
            "description": "Type of message",
            "example": "user"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Message timestamp"
          },
          "metadata": {
            "type": "object",
            "description": "Additional message metadata"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["username", "email"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Auto-generated MongoDB ObjectId"
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30,
            "description": "Unique username",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "john@example.com"
          },
          "avatar": {
            "type": "string",
            "description": "User avatar URL",
            "example": "https://example.com/avatar.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "User active status",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    }
  }
}